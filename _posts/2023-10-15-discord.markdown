---
layout: post
title:  "Creating a Discord Bot in Golang"
date:   2023-10-15 15:20:57 -0500
categories: personal-projects
---

What a great summer 2023 it was!  Fall means cooler weather, hockey season, and more time indoors.  That means it's time to tinker yet again, and this time I challenged myself to write a Discord bot in Golang.

# Project Idea

For the last few years I've tinkered around with various forms of pulling EA Sports NHL videogame data from EA Sports's website.  They offer a pretty nice [website](https://www.ea.com/games/nhl/nhl-24/pro-clubs/rankings) that returns data from the online games played for their "EASHL" game mode. What they display is a small subset of a much larger amount of data.

I wanted to build a Discord bot that could take a select few teams and pull up the data for their recent games. 

# Retrieving the Data

Getting the API calls took a bit of detective work.  For a few years EA used to have OpenAPI Spec docs available for the APIs, but they disabled them to the public a few years ago.  Fortunately the APIs can still be called.  They'll block cross-origin requests from browsers and prevent XSS, but they can be called in other ways.

I had an old Golang project that I built in 2022 just before I took an Engineering Manager gig working in a Golang shop.  It did 90% of what I needed, calling the APIs and parsing the APIs into structs.  Originally it wrote the data to a relational database (Sqlite) that I could share with our advanced stat gurus to perform some data analytics wizardry. 

All I had to do was rip out the batch job trigger and the Sqlite persistence, and write the Discord bot logic to retrieve, format, and send back the data. 

# Creating the Discord Bot

## Setting up the Discord Bot

Discord has a developer mode and some tools that let you set up the bot.

Getting the keys set up and the permissions set up is pretty easy.

## Building the Bot

[DiscordGo](https://github.com/bwmarrin/discordgo) package is very robust, covers a large portion of the Discord chat client API.

It could not be simpler to set up.  Once you have your token set up and your app permissions set, you can get started in a few lines!

```
func main() {

	dg, err := discordgo.New("Bot " + token)
	if err != nil {
		panic(err)
	}
	dg.AddHandler(messageCreate)
	dg.Identify.Intents = discordgo.IntentsGuildMessages
	dg.Identify.Intents |= discordgo.IntentMessageContent

	err = dg.Open()
	defer dg.Close()

	if err != nil {
		panic(err)
	}

	fmt.Println("Bot is now active and listening")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)
	<-sc

}
```

In this case, the bot is designed to handle messages in Discord channels and respond appropriately.  Even the handler code is pretty intuitive:


```
func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	// Ignore all messages created by the bot itself
	if m.Author.ID == s.State.User.ID {
		return
	}

	fmt.Println(m.Content)
	if strings.HasPrefix(m.Content, "!recentgames") {
		splitStrs := strings.SplitAfter(m.Content, "\"")

        if len(splitStrs) != 3 {
			fmt.Println(strconv.Itoa(len(splitStrs)))
			sendUsage(s, m)
			return
		}

		teamName := strings.Trim(splitStrs[1], "\"")
		teamId, err := GetTeamIdByNameCached(teamName)

		if err != nil {
			s.ChannelMessageSend(m.ChannelID, err.Error())
			s.ChannelMessageSend(m.ChannelID, "could not resolve team name: "+teamName)
			return
		}
		s.ChannelMessageSend(m.ChannelID, "OK, bear with me while I look up the recent games!")

		recentGames := LoadMatchResults(teamId)

		for _, game := range recentGames {
			_, err := s.ChannelMessageSend(m.ChannelID, game.ToDiscordFormat())
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "Unexpected error, please contact the developer")
				panic(err)
			}
		}
	}
}
```

After ignoring self-messages, the code looks for a special type of message it wishes to respond to (!recentgames), parses the input, and returns the data in a specially formatted string.

## Testing the Bot

Very intuitive!  Running your Discord bot code brings it online and has it actively listening.  Simply trigger the event to be handled by your bot in Discord, and watch the magic happen. 